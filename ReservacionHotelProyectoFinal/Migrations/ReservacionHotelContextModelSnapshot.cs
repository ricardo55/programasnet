// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReservacionHotelExamen2.Models;

namespace ReservacionHotelExamen2.Migrations
{
    [DbContext(typeof(ReservacionHotelContext))]
    partial class ReservacionHotelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BookedEndDate");

                    b.Property<DateTime>("BookedStartDate");

                    b.Property<string>("BookingComments")
                        .HasMaxLength(300);

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateBookingMade");

                    b.Property<int?>("RoomID");

                    b.Property<DateTime>("TimeBookingMade");

                    b.Property<int>("TotalPaymentDueAmount");

                    b.Property<DateTime>("TotalPaymentDueDate");

                    b.Property<DateTime>("TotalPaymentMadeOn");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("RoomID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.BookingRoom", b =>
                {
                    b.Property<int>("BookingID");

                    b.Property<int>("RoomID");

                    b.Property<int>("GuestID");

                    b.HasKey("BookingID", "RoomID", "GuestID");

                    b.HasIndex("GuestID");

                    b.HasIndex("RoomID");

                    b.ToTable("BookingRoom");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerAdressCountry")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CustomerAdressPostalCode")
                        .IsRequired();

                    b.Property<string>("CustomerAdressStreet")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CustomerAdressTown")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CustomerDOB");

                    b.Property<string>("CustomerEmail")
                        .IsRequired();

                    b.Property<string>("CustomerForenames")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CustomerHomePhone")
                        .IsRequired();

                    b.Property<string>("CustomerMobilePhone")
                        .IsRequired();

                    b.Property<string>("CustomerSurnames")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CustomerTitle")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CustomerWorkPhone")
                        .IsRequired();

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.FacilitieList", b =>
                {
                    b.Property<int>("FacilitieListID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacilityDesc")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("FacilitieListID");

                    b.ToTable("FacilitieList");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.Guest", b =>
                {
                    b.Property<int>("GuestID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GuestAdressCounty")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("GuestAdressPostalCode")
                        .IsRequired();

                    b.Property<string>("GuestAdressStreet")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("GuestAdressTown")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("GuestContactPhone")
                        .IsRequired();

                    b.Property<DateTime>("GuestDOB");

                    b.Property<string>("GuestForenames")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("GuestSurnames")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("GuestTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("GuestID");

                    b.ToTable("Guest");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookingID");

                    b.Property<int>("CustomerID");

                    b.Property<long>("PaymentAmount");

                    b.Property<string>("PaymentComments")
                        .HasMaxLength(300);

                    b.Property<int>("PaymentMethodID");

                    b.HasKey("PaymentID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PaymentMethodDesc")
                        .HasMaxLength(300);

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(100);

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("RoomBandID");

                    b.Property<int>("RoomPriceID");

                    b.Property<int>("RoomTypeID");

                    b.HasKey("RoomID");

                    b.HasIndex("RoomBandID");

                    b.HasIndex("RoomPriceID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.RoomBand", b =>
                {
                    b.Property<int>("RoomBandID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BandDesc")
                        .HasMaxLength(100);

                    b.HasKey("RoomBandID");

                    b.ToTable("RoomBand");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.RoomFacilities", b =>
                {
                    b.Property<int>("RoomID");

                    b.Property<int>("FacilitieListID");

                    b.Property<string>("FacilityDetails")
                        .HasMaxLength(100);

                    b.HasKey("RoomID", "FacilitieListID", "FacilityDetails");

                    b.HasIndex("FacilitieListID");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.RoomPrice", b =>
                {
                    b.Property<int>("RoomPriceID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("RoomPriceAmount");

                    b.HasKey("RoomPriceID");

                    b.ToTable("RoomPrice");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.RoomType", b =>
                {
                    b.Property<int>("RoomTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoomTypeDesc")
                        .HasMaxLength(100);

                    b.HasKey("RoomTypeID");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReservacionHotelExamen2.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReservacionHotelExamen2.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReservacionHotelExamen2.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.Booking", b =>
                {
                    b.HasOne("ReservacionHotelExamen2.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.BookingRoom", b =>
                {
                    b.HasOne("ReservacionHotelExamen2.Models.Booking", "Booking")
                        .WithMany("BookingRooms")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.Guest", "Guest")
                        .WithMany("BookingRooms")
                        .HasForeignKey("GuestID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.Payment", b =>
                {
                    b.HasOne("ReservacionHotelExamen2.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.Room", b =>
                {
                    b.HasOne("ReservacionHotelExamen2.Models.RoomBand", "RoomBand")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomBandID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.RoomPrice", "RoomPrice")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomPriceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReservacionHotelExamen2.Models.RoomFacilities", b =>
                {
                    b.HasOne("ReservacionHotelExamen2.Models.FacilitieList", "FacilitieList")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("FacilitieListID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReservacionHotelExamen2.Models.Room", "Room")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
